// Basic Exercises involving Bools

type Bool {
  true
  false
}

// Is true
// Returns true if input is true
is_true(a: Bool): Bool
  case a {
    true: Bool.true
    false: Bool.false
  }
  //?i2

// Is false
// Returns true if input is false
is_false(a: Bool): Bool
  case a {
    false: Bool.true
    true: Bool.false
  }
//  ?i

// Negation
// Returns the opposite of a Bool
neg(b: Bool): Bool 
  case b {
    true: Bool.false
    false: Bool.true
  }
//  ?n

// And
// Returns true if both inputs are true
and(a: Bool, b: Bool): Bool
  case a {
    false: Bool.false
    true: case b {
            true: Bool.true
            false: Bool.false
             }
  }
//  ?a

// Or
// Returs true if any input is true
or(a: Bool, b: Bool): Bool
  case a {
    true: Bool.true
    false: case b {
             true: Bool.true
             false: Bool.false
            }
  }
//  ?o

// Equal
// Returs true if both inputs are identical
eql(a: Bool, b: Bool): Bool
  case a {
    true: case b {
            true: Bool.true
            false: Bool.false
      }
    false: case b {
            false: Bool.true
            true: Bool.false
       }
  } 
//  ?e

// Xor
// Returns true if both inputs are different
xor(a: Bool, b: Bool): Bool
  case a {
    true: case b {
            false: Bool.true
            true: Bool.false
      }
    false: case b {
            false: Bool.false
            true: Bool.true
       }
  }
//  ?x

// Nor
// Returns true if both inputs are false
nor(a: Bool, b: Bool): Bool
  case a {
    false: case b {
             true: Bool.false
             false: Bool.true
       }
    true: Bool.false
  }
//  ?n2

// Nand
// Returns false only if both inputs are true
nand(a: Bool, b: Bool): Bool
  case a {
    true: case b {
            true: Bool.false
            false: Bool.true
      }
    false: Bool.true
  }
//  ?n3

// Xnor
// Returns true if both inputs are identical
xnor(a: Bool, b: Bool): Bool
  case a {
    true: case b {
            true: Bool.true
            false: Bool.false
      }
    false: case b {
             true: Bool.false
             false: Bool.true
       }
  }
//  ?x2

ex_00: Bool
  let a = true
  let b = false
  let c = true
  let d = false
//  is_true(b)  // Returns true if input is true
//  is_false(b)   // Returns true if input is false
//  neg(b)      // Returns the opposite of a Bool
//  and(b, d)   // Returns true if both inputs are true
//  or(a, b)    // Returs true if any input is true
//  eql(d, a)   // Returs true if both inputs are identical
//  xor(a, b)   // Returns true if both inputs are different
//  nor(d, b)   // Returns true if both inputs are false
//  nand(c, a)  // Returns false only if both inputs are true
  xnor(b,c)   // Returns true if both inputs are identical
