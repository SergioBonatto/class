//Char and String

// Charactere Type
// Alias for U16
Char: Type
  U16


//Syntax Sugar for U16
  //0#16, 1#16, 2#16 ...


//Syntax Sugar for Char
  //'0', '1', '2' ... 

//Ascii Table from Wikipedia:
// https://upload.wikimedia.org/wikipedia/commons/1/1b/ASCII-Table-wide.svg

//  _________________________________________
// | U16 Syntax Sugar   | Char Syntax Sugar  |  
// |--------------------|--------------------|
// |     72#16          |      'H'           |
// |    101#16          |      'e'           |
// |    121#16          |      'y'           |
//  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

//Verifies if the character is Upper Case

//is_upper('a') -> Bool.false
//is_upper('A') -> Bool.true
//is_upper('0') -> Bool.false
is_upper(x: Char): Bool 
  case U16.gte(x, 65) {
    false: Bool.false
    true : 
      case U16.lte(x, 90) {
        false: Bool.false
        true : Bool.true
      }
  }



//Verifies if the character is Lower Case

//is_lower('a') -> Bool.true
//is_lower('A') -> Bool.false
//is_lower('0') -> Bool.false
is_lower(x: Char): Bool
  case U16.gte(x, 97) {
    false: Bool.false
    true : U16.lte(x, 122)
  }



//Verifies if the character is a Number-Digit Value

//is_digit('a') -> Bool.false
//is_digit('A') -> Bool.false
//is_digit('0') -> Bool.true
is_digit(x: Char): Bool
  case U16.gte(x, 48){
    false: Bool.false
    true : U16.lte(x, 57)
  }



//Verifies if both of the Characters are the same

//is_equal('a', 'A') -> Bool.false
//is_equal('A', '0') -> Bool.false
//is_equal('0', '0') -> Bool.true
equal(x: Char, y: Char): Bool
  U16.eql(x, y)



//Transforms Characters into Nat digits

//to_digit('0') -> Nat.zero
//to_digit('1') -> Nat.succ(Nat.zero)
//to_digit('4') -> 4
to_digit(x: Char): Nat
  Nat.sub(U16.to_nat(x), 48)



//Transforms all Characters into Lower Case Characters

//to_lower('A') -> 'a'
//to_lower('B') -> 'b'
//to_lower('Z') -> 'z'
to_lower(x: Char): Char
  case is_upper(x) {
    false: x 
    true : U16.add(x, 32)
  }  



//Transforms all Characters into Upper Case Characters

//to_upper('a') -> 'A' 
//to_upper('b') -> 'B'
//to_upper('z') -> 'Z'
to_upper(x: Char): Char
  case is_lower(x) {
    false: x
    true : U16.sub(x, 32)
  }





//String Type
type String { 
  nil,
  cons(head: Char, tail: String)
  }

//Without Syntax Sugar for String
//a = String.cons('H', String.cons('I', String.nil))
//b = String.cons('H', String.cons('e', String.cons('l', String.cons('l', String.cons('o', String.nil)))))
//c = String.cons('t', String.cons('e', String.cons('x', String.cons('t', String.nil))))

//Syntax Sugar for String
//a = "HI"
//b = "Hello"
//c = "text"



//Concatenates two Strings into one

//concat(a,b) -> "HiHello"
//concat(b,c) -> "Hellotext"
concat(xs: String, ys: String): String
  case xs {
    nil : ys
    cons: String.cons(xs.head, concat(xs.tail, ys))
  }



//Applies a Function to all Characters of the String

//map(to_lower, a) -> "hi"
map(fn: Char -> Char, xs: String): String
  case xs {
    nil : xs
    cons: String.cons(fn(xs.head), map(fn, xs.tail))
  }



//Converts all Lower Case Caracters in a String to Upper Case

//string_to_upper(c) -> "TEXT"
string_to_upper(xs: String): String
  map(to_upper, xs)




//Convers the String into bits
//              "0001001000000000 1001001000000000"
//              "1001001000000000 0001001000000000"
//              "0000000001001001 0000000001001000"
//to_bits(a) -> "0000000001001001 0000000001001000"
//to_bits(b) -> "0000000001101111 0000000001101100 00000000011011000 000000001100101 0000000001001000"
//to_bits(c) -> "0000000001110100 0000000001111000 00000000011001010 000000001110100"
to_bits(xs: String): Bits
  case xs {
    nil : Bits.e
    cons: Bits.concat(to_bits(xs.tail), Bits.reverse(U16.to_bits(xs.head)))  
  }   




//Verifies if two Strings are Equal

//stringequal(a, a) -> Bool.true
//stringequal(a, b) -> Bool.false
//stringequal(b, c) -> Bool.false
stringequal(xs: String, ys: String): Bool
  case xs ys {
    nil  nil : Bool.true
    cons cons: case equal(xs.head, ys.head){
      true : stringequal(xs.tail ys.tail)
      false: Bool.false
      }
  } default Bool.false



//Verifies if All String elements are Numbers

//is_nat(a)      -> Bool.false
//is_nat(b)      -> Bool.false
//is_nat("1234") -> Bool.true
is_nat(xs: String): Bool
  case xs {
    nil : Bool.true
    cons: Bool.and(is_digit(xs.head), is_nat(xs.tail))
  }


// Takes any elements while the condition is matched.

//take_while(is_upper,    a) -> "HI"
//take_while(is_lower,    b) -> ""
//take_while(is_equal('t'), c) -> "t"
take_while(cond: Char -> Bool, xs: String): String
  case xs {
    nil : ""
    cons: 
      case cond(xs.head){
        false: take_while(cond, xs.tail)
        true : String.concat(Char.to_string(xs.head), take_while(cond, xs.tail))
      }
  }


//Finds the index of the head for the first occurence if any of the Characters are equal

//find(a, "H") -> 0
//find(b, "l") -> 2
//find(c, "x") -> 2
find(xs: String, x: Char): Nat
  case xs {
    nil : Nat.zero
    cons: 
      case equal(xs.head, x){
        false: find(xs.tail, x)
        true : Nat.succ(find(xs.tail, x))
      }
  }


//Filters the String and discards all the Chars that doesn't satisfy given condition 

//filter(is_upper,      a) -> "HI"
//filter(is_lower,      b) -> "ello"
//filter(is_equal('t'), c) -> "tt"
filter(cond: Char -> Bool, xs: String): String
  case xs {
    nil : xs
    cons: 
      case cond(xs.head){
        false: filter(cond, xs.tail)
        true : concat(Char.to_string(xs.head), filter(cond, xs.tail))
      }
  }



//Concatenates all elements of a List of Strings

//flatten([a,b,c]) -> "HIHellotext"
flatten(lxs: List<String>): String
  case lxs {
    nil : ""
    cons: concat(lxs.head, flatten(lxs.tail))
  }  




//Drops a n Number of characteres from a String

//drop(1, a) -> "I"
//drop(2, b) -> "llo"
//drop(3, c) -> "t"
drop(n: Nat, xs: String): String
  case n {
    zero: xs
    succ: 
      case xs {
        nil : xs
        cons: drop(n.pred, xs.tail)
      }
  }




//Takes n elements of a String

//take(1, a) ->  "H"
//take(2, b) ->  "He"
//take(3, c) ->  "tex"
take(n: Nat xs: String): String
  case n {
    zero: ""
    succ: 
      case xs {
        nil : xs
        cons: concat(Char.to_string(xs.head), take(n.pred, xs.tail))
      }
  } 



//Takes a x part of the string after a n Index of values get dropped

//slice(1, 2, a) -> "I"  HI
//slice(2, 4, b) -> "ll" hello
//slice(1, 3, c) -> "ex" text
slice(n: Nat, x: Nat, xs: String): String
  case xs {
    nil : xs
    cons: 
      case n {
        zero: 
          case x {
            zero: ""
            succ: drop(n, take(x, xs))
          }
        succ: drop(n, take(x, xs)) 
      }
  }




// Final Boss
// Divides the elements of a String into a list, using a match you decide



//split(b, "l")                                   -> ["He","" , "o"
//split("Split example with matching space", " ") -> ["Split,example,with,matching,space]
//split("You are awesome!", " ")                  -> ["You","are","awesome!"]
split(xs: String, match: String): List<String>
  split_go(xs, match, "")

split_go(xs: String, match: String, ys: String): List<String>
  case xs {
    nil : List.cons<String>(ys, List.nil<String>)
    cons:
      case match {
        nil : List.pure!(xs)
        cons: 
          case stringequal(match, take(String.length(match), xs)){
            false: split_go(xs.tail, match, concat(ys, Char.to_string(xs.head)))
            true : List.cons<String>(ys, split_go(drop(String.length(match), xs), match, ""))
        }
      }
  }

ex_10:_
  // is_upper('4')
  // is_lower('a')
  // is_digit('.')
  // equal('a', 'a')
  // to_digit('9')
  // Char.to_string(to_lower('0'))
  // Char.to_string(to_upper('3'))
  // concat("hi", "hello")
  // map(to_upper, "hi")
  // string_to_upper("hello")
  // Bits.show(to_bits("HI"))
  // stringequal("azul", "AZUL")
  // is_nat("")
  // take_while(is_lower, "hI HellO")
  // find("hello", 'a')
  // filter(equal('l'), "hellO")
  // flatten(["Hi", "Hello", "Kind"])
  // drop(2, "hello")
  // take(2, "hello")          456
  // slice(2, 4, "hello")  // "234567812345678178"
 List.show!((a) a, split("hello", "l"))
