// type MaybeBool
// It maybe holds a Boolean inside it

type MaybeBool { 
  none 
  some(value: Bool)
 }
 // Returns true if Maybe is none
is_none(a: MaybeBool): Bool
  case a {
    none: Bool.true
    some: Bool.false
  }
   
// Returns true if Maybe is some
is_some(a: MaybeBool): Bool
  case a {
    none: Bool.false
    some: Bool.true
  }
// Returns true if both inputs are identical
// eql(MaybeBool.none,             MaybeBool.none            ) -> true
// eql(MaybeBool.some(Bool.false), MaybeBool.some(Bool.false)) -> true

eql(a: MaybeBool, b: MaybeBool): Bool
  let c = b
  case a {
    none: case b{
      none: Bool.true
      some: Bool.false
    }
    some: case c{
      none: Bool.false
      some: case a.value {
        true: c.value
        false: case c.value{
          true: Bool.false
          false: Bool.true
      }
    }
  }
  }
// case a b {
//     none none: Bool.true
//     some some: Bool.true
//     none some: Bool.false
//     some none: Bool.false
//   }
//
// Returns the value inside the MaybeBool.
// If there is no value contained, returns v instead
extract(a: MaybeBool, v: Bool): Bool
  case a {
    none: v
    some: a.value
  }
  // case a b {
  //   none none: Bool.true
  //   some some: case a.value {
  //     true: b.value
  //     false: case b.value {
  //       true:  Bool.false
  //       false: Bool.true
  //     }
  //   }
  // } default Bool.false
//  ?c

// Returns the value inside the MaybeBool.
// If there is no value contained, returns v instead
test_default(a: MaybeBool, v: Bool): Bool
  case a {
    none: v
    some: a.value 
  }

// Create a MaybeBool from a Boolean
// create(Bool.false) -> MaybeBool(Bool.false)
create(a:Bool): MaybeBool
  MaybeBool.some(a)
  // case a {
  //   false: MaybeBool.some(a)
  //   true:  MaybeBool.some(a)
  // }

// Returns the first input that is a MaybeBool.some
// Returns MaybeBool.none if both are MaybeBool.none
or(a: MaybeBool, b: MaybeBool) : MaybeBool 
  // case a {
  //   none: case b{
  //     none: MaybeBool.none
  //     some: MaybeBool.soma(b.value)
  //   }
  //   some: case b{
  //     none: MaybeBool.soma(a.value)
  //     some: MaybeBool.soma(a.value)
  //   }
  // }
  case a b {
    none none: MaybeBool.none
    none some: MaybeBool.some(b.value)
  }default MaybeBool.some(a.value)

ex_01: IO<Unit>
  IO {
    Tests._01.is_none(is_none)
    Tests._01.is_some(is_some)
    Tests._01.eql(eql)
    Tests._01.extract(extract)
    Tests._01.create(create)
    Tests._01.or(or)
  }
// let a = MaybeBool.some(Bool.true)
// let b = MaybeBool.some(Bool.false)
// let a = create(Bool.true)
// let b = create(Bool.false)
// List.show!(MaybeBool.show, [or(a,b)] ) | "<- MaybeBool ## Bool ->" | 
// List.show!(     Bool.show, [eql(a,b)])      
// or(a,b)
// eql(a,b)
//   case a {
//     none: case b {
//       none: MaybeBool.none
//       some: MaybeBool.some(b.value)
//       }
//     some: case b {
//             none: MaybeBool.some(a.value)
//             some: MaybeBool.some(b.value)
//
//       }
//   }
// //  ?f
//
//
// ex_01:_  //MaybeBool
//   let a = MaybeBool.none
//   let b = MaybeBool.none
//   //is_none(a)  // Returns true if Maybe is none
//   //is_some(b)  // Returns true if Maybe is some
//   //eql(a, b)   // Returns true if both inputs are identical
//   //test_default(a)  // Returns the value inside the MaybeBool.
//   //create(false)   // Create a MaybeBool from a Boolean
//   or(a, b)    // Returns the first input that is a MaybeBool.some
//     //MaybeBool.show(a)
//

