// Basic exercises involving Lists
// Advanced exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}
// Returns the head of the List
head<A: Type>(xs: List<A>): Maybe<A>
  case xs {
    nil: Maybe.none!
    cons: Maybe.some!(xs.head)
  }

// Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
  case xs {
    nil: List.nil!
    cons: xs.tail
  }

// Returns the length of a list
length<A: Type>(xs: List<A>): Nat
  case xs {
    nil: Nat.zero
    cons: Nat.succ(length!(xs.tail))
  }

// Returns the last element of a list
last<A: Type>(xs: List<A>): Maybe<A>
  case xs {
    nil: Maybe.none!
    cons: case xs.tail {
            nil: Maybe.some!(xs.head)
            cons: last!(xs.tail)
           }
  }

// Returns the list without the last element
init<A: Type>(xs: List<A>): List<A>
  case xs {
    nil: xs
    cons: let new_list = reverse!(xs)
          let lista = tail!(new_list)
          reverse!(lista)
  }

// Concatenates two lists
concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
  case xs {
   nil: ys
   cons: case ys {
           nil: xs
           cons: List.cons!(xs.head, concat!(xs.tail, ys))
         }
  }

// Removes n elements from the start of the list
// List.drop<Nat>(3, [1,2,3,4,5]) -> [4, 5]
drop<A: Type>(n: Nat, xs: List<A>): List<A>
  case n {
    zero: xs
    succ: case xs {
            nil: List.nil!
            cons: drop!(n.pred, xs.tail)
            }
  }

// Creates a new list with the N first elements of the previous list
// List.take<Nat>(3, [1,2,3,4,5]) -> [1,2,3]
take<A: Type>(n: Nat, xs: List<A>): List<A>
  case n {
    zero: List.nil!
    succ: case xs {
            nil: List.nil!
            cons: List.cons!(xs.head, take!(n.pred, xs.tail))
            }
  }

// Applies a function to all elements of a list
map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
  case xs {
    nil: List.nil!
    cons: List.cons!(fn(xs.head), map!!(fn, xs.tail))
  }

// Returns the same list, with the order reversed
reverse<A: Type>(xs: List<A>): List<A>
  reverse.go<A>(List.nil<A>, xs)
//
reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  case old_list {
    nil: new_list
    cons: reverse.go!(List.cons!(old_list.head, new_list), old_list.tail)
  }

type Maybe <A: Type> {
  none
  some(value: A)
}

// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]
// zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
// Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
  case xs {
    nil: List.nil!
    cons: xs.tail
  }

// Returns the length of a list
length<A: Type>(xs: List<A>): Nat
  case xs {
    nil: Nat.zero
    cons: Nat.succ(length!(xs.tail))
  }

// Returns the last element of a list
last<A: Type>(xs: List<A>): Maybe<A>
  ?last

// Returns the list without the last element
init<A: Type>(xs: List<A>): List<A>
  ?init

// Removes n elements from the start of the list
// List.drop<Nat>(3, [1,2,3,4,5]) -> [4, 5]
drop<A: Type>(n: Nat, xs: List<A>): List<A>
  ?drop



// Creates a new list with the N first elements of the previous list
// List.take<Nat>(3, [1,2,3,4,5]) -> [1,2,3]
take<A: Type>(n: Nat, xs: List<A>): List<A>
  ?take

// Concatenates two lists
concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
  case xs {
   nil: ys
   cons: case ys {
           nil: xs
           cons: List.cons!(xs.head, concat!(xs.tail, ys))
         }
  }

// Applies a function to all elements of a list
map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
  case xs {
    nil: List.nil!
    cons: List.cons!(fn(xs.head), map!!(fn, xs.tail))
  }



// Returns the same list, with the order reversed
reverse<A: Type>(xs: List<A>): List<A>
  reverse.go<A>(List.nil<A>, xs)

reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  case old_list {
    nil: new_list
    cons: reverse.go!(List.cons!(old_list.head, new_list), old_list.tail)
  }
ex_08: IO<Unit>
  IO {
    Tests._08.head(head)
    Tests._08.tail(tail)
    Tests._08.length(length)
    Tests._08.last(last)
    Tests._08.init(init)
    Tests._08.concat(concat)
    Tests._08.drop(drop)
    Tests._08.take(take)
    Tests._08.map(map)
    Tests._08.reverse(reverse)
  }

