//Bits

//File for exercises in Bits

//e = empty
//o = 0
//i = 1
type Bits { 
  e
  o(pred: Bits)
  i(pred: Bits)
}

//a = Bits.i(Bits.i(Bits.e))
//b = Bits.o(Bits.i(Bits.i(Bits.e)))
//c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
//d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))


//Verifies if it is an Empty Bit

//is_empty(a)      -> Bool.false
//is_empty(b)      -> Bool.false
//is_empty(c)      -> Bool.false
//is_empty(d)      -> Bool.false
//is_empty(Bits.e) -> Bool.true
is_empty(b: Bits): Bool
  case b {
    e: Bool.true
  } default Bool.false


//Gets the Tail of a Bits structure

//tail(a) -> Bits.i(Bits.e)
//tail(b) -> Bits.i(Bits.i(Bits.e))
//tail(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//tail(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
tail(b: Bits): Bits
  case b {
    e: b
  } default b.pred


//Negates all Bits

//notb(a) -> Bits.o(Bits.o(Bits.e))
//notb(b) -> Bits.i(Bits.o(Bits.o(Bits.e)))
//notb(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//notb(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.e))))
notb(b: Bits): Bits
  case b {
    e: b
    o: Bits.i(notb(b.pred))
    i: Bits.o(notb(b.pred))
  }




//Increments a Bit

//inc(a) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//inc(b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//inc(c) -> Bits.i(Bits.o(Bits.i(Bits.i(Bits.e))))
//inc(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.i(Bits.e)))))
inc(b: Bits): Bits
  case b {
    e: Bits.i(Bits.e)
    o: Bits.i(b.pred)
    i: Bits.o(inc(b.pred))
  }


//Decrements a Bit

//dec(a) -> Bits.o(Bits.i(Bits.e))
//dec(b) -> Bits.i(Bits.o(Bits.i(Bits.e)))
//dec(c) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.e))))
//dec(d) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
dec(b: Bits): Bits
  fix_bit(dec_go(b))

dec_go(b: Bits): Bits
  case b {
    e: b
    o: case b.pred{
        e: Bits.e  
       } default Bits.i(dec(b.pred))
    i: case b.pred {
        e: Bits.o(Bits.e)
       } default Bits.o(b.pred)
  }



//Concatenate two Bits structures

//concat(a,b) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)
//concat(b,c) -> Bits.o(Bits.i(Bits.i(Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))))))
//concat(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))))))
concat(a: Bits, b: Bits): Bits
  case a {
    e: case b {
         e: Bits.e
         o: Bits.o(concat(a, b.pred))
         i: Bits.i(concat(a, b.pred))
        }
    o: Bits.o(concat(a.pred, b))
    i: Bits.i(concat(a.pred, b))
  }


//Adds two Bits structures

//add(a,b) -> Bits.i(Bits.o(Bits.o(Bits.i(Bits.e))))
//add(b,c) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//add(c,d) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)))))
add(a: Bits, b: Bits): Bits 
  case a {
    e: b
    o: case b {
         e: a
         o: Bits.o(add(a.pred, b.pred))
         i: Bits.i(add(a.pred, b.pred))
       }
    i: case b {
         e: a
         o: Bits.i(add(a.pred, b.pred))
         i: Bits.o(inc(add(a.pred, b.pred)))
       }
  }



//Returns Bits.i if only both bits are Bits.i

//and(a,b) -> Bits.o(Bits.i(Bits.e))
//and(b,c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//and(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
and(a: Bits, b: Bits): Bits
  case a b {
    o o: Bits.o(and(a.pred, b.pred))
    o i: Bits.o(and(a.pred, b.pred))
    i o: Bits.o(and(a.pred, b.pred)) 
    i i: Bits.i(and(a.pred, b.pred))
  } default Bits.e  


//Returns Bits.i if any of bits are Bits.i

//or(a,b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//or(b,c) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
//or(c,d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
or(a: Bits, b: Bits): Bits
  case a {
    e: a
    o: case b {
         e: Bits.o(or(a.pred, b))
         o: Bits.o(or(a.pred, b.pred))
         i: Bits.i(or(a.pred, b.pred))
         }
    i: case b {
         e: Bits.i(or(a.pred, b))
         o: Bits.i(or(a.pred, b.pred))
         i: Bits.i(or(a.pred, b.pred))
   }
  }


//Verifies if both Bit structures are equal

//eql(a,b) -> Bool.false
//eql(b,c) -> Bool.false
//eql(d,d) -> Bool.true
eql(a: Bits, b: Bits): Bool
  case a b {
  // FIXME 
    e e: Bool.true
    o o: Bool.true
    i i: Bool.true
  } default Bool.false


//Reverses a Bits structure

reverse_go(b: Bits, acum: Bits): Bits
  case b {
    e: acum
    o: reverse_go(b.pred, Bits.o(acum))
    i: reverse_go(b.pred, Bits.i(acum))
  }


//reverse(a) -> Bits.i(Bits.i(Bits.e))
//reverse(b) -> Bits.i(Bits.i(Bits.o(Bits.e)))
//reverse(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//reverse(d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
reverse(b: Bits): Bits
  reverse_go(b, Bits.e)




//Gets the length of the Bits structure

length_go(bs: Bits, acum: Nat): Nat
  case bs {
    e: acum
    o: length_go(bs.pred, Nat.succ(acum))
    i: length_go(bs.pred, Nat.succ(acum))
  }



//length(a) -> Nat.succ(Nat.succ(Nat.zero))
//length(b) -> Nat.succ(Nat.succ(Nat.succ(Nat.zero)))
//length(c) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
//length(d) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
length(bs: Bits): Nat
  length_go(bs, 0)



//Multiplies two Bits structures
// FIXME: 
mul_go(a: Bits, b: Bits, acum: Bits): Bits
  case b {
    e: case a {
        e: Bits.e
       } default acum
    o: case a {
        e: Bits.e
        o: case b.pred{
            e: Bits.o(Bits.e) 
             } default mul_go(Bits.o(a), b.pred, acum)
       } default mul_go(Bits.o(a), b.pred, acum)
    i: case a {
        e: Bits.e
        i: case b.pred{
            e: Bits.i(Bits.e)
           } default mul_go(Bits.o(a), b.pred, add(a, acum))
       } default mul_go(Bits.o(a), b.pred, add(a, acum))
}

fix_bit(anum: Bits): Bits
  let a = reverse(anum)
  case a {
    e: reverse(a)
    o: case a.pred{
        e: Bits.o(Bits.e)
       } default fix_bit(a.pred)
    i: reverse(a)
  }

//mul(a,b) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//mul(b,c) -> Bits.o(Bits.o(Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))))
mul(a: Bits, b: Bits): Bits
  mul_go(a, b, Bits.e)



//Drops a n Number of Bits starting from from the least significative bit

//drop(1, a) -> Bits.i(Bits.e)
//drop(1, b) -> Bits.i(Bits.i(Bits.e))
//drop(1, c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//drop(1, d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
drop(n: Nat, bs: Bits): Bits
  case n {
    zero: bs
    succ: drop(n.pred, tail(bs))
  }
  


//Takes n Bits from the structure, starting from the least significative bit

//take(1, a) -> Bits.i(Bits.e)
//take(2, b) -> Bits.o(Bits.i(Bits.e))
//take(3, c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//take(4, d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
take(n: Nat, bs: Bits): Bits
  case n {
    zero: Bits.e
    succ: reverse(drop(Nat.sub(length(bs), n), reverse(bs)))
  }
// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]
zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
  case xs {
    nil: List.nil!
    cons: case ys {
            nil: List.nil!
            cons: List.cons!(Pair.new!!(xs.head, ys.head), zip!!(xs.tail, ys.tail))
           }
  }

// Returns the smallest element of a List

// -------- Roubalheira descarada --------
// o que eu fiz? Roubei, na cara dura
// peguei a função gtn do ex_04 e
// apliquei no smallest

gtn(a: Nat, b: Nat): Bool // if A > B == True else false
  case a {
    zero: Bool.false
    succ: case b {
            zero: Bool.true
            succ: gtn(a.pred, b.pred)
            }
  }

// caso xs seja vazio, retorna zero
// caso tenha algo
// se não tiver um corpo/tail, retorna a cabeça
// se tirver uma tail, eu verifico se a
// head é maior que a head da tail
// se for, a função roda de novo
// exluindo a head
// se não for, eu crio uma nova lista só
// com a head e a tail da tail,
// excluindo a head da tail
// e rodo a função nessa nova lista

smallest(xs: List<Nat>): Nat
  case xs {
    nil: Nat.zero
    cons: case xs.tail {
            nil: xs.head
            cons: case gtn(xs.head, xs.tail.head) {
                    true: smallest(xs.tail)
                    false: smallest(List.cons!(xs.head, xs.tail.tail))
                    }
           }
  }

// Roubalheira 2, o inimigo agora é outro
// resgatei a função eql do ex_04 e usei
// junto com o smallest para a função
// delete_smallest

// Equal
eql(a: Nat, b: Nat): Bool // Given 2 numbers, it returns true if the 2 are the same and false if they are different.
  case a {
    zero: case b {
      zero: Bool.true
      succ: Bool.false
      }
    succ: case b {
      zero: Bool.false
      succ: eql(a.pred, b.pred)
      }
  }


// agora onde endoidei
// vejo se a lista é vazia, se for, retorna vazio
// caso não seja, vejo se há mais de um elemento
// caso não tenha, retorna vazio
// caso tenha mais de um elemento, vejo
// se a head é igual ao menor elemento da lista
// caso seja, retorno só a tail
// caso não seja, construo uma nova
// lista com a head mais o resultado da
// função com a head da tail

// Returns the same list without the smallest element
// delete_smallest(xs: List<Nat>): List<Nat>
//   case xs {
//     nil: List.nil!
//     cons: case xs.tail {
//             nil: List.nil!
//             cons: case eql(xs.head, smallest(xs)){
//                     true: xs.tail
//                     false: List.cons!(xs.head, delete_smallest(xs.tail))
//                    }
//             }
//   }
// //  ?d

// Returns the same list, in ascending order
// sort_ascending(xs: List<Nat>): List<Nat>
//   case xs {
//     nil: List.nil!
//     cons: case eql(xs.head, smallest(xs)) {
//             true: List.cons!(xs.head, sort_ascending(xs.tail) )
//             false: sort_ascending(List.cons!(// TERMINAR AQUI!!!!! ))
//            }
//
//     // List.cons!(smallest(xs), sort_ascending(xs.tail))
//   }
// //  ?a
delete_smallest(xs: List<Nat>): List<Nat>
  case xs {
    nil: List.nil!
    cons: 
      case Nat.eql(xs.head, smallest(xs)){
        true: xs.tail
        false: List.cons!(xs.head, delete_smallest(xs.tail))
      }
  }
  

// Returns the same list, in ascending order
sort_ascending(xs: List<Nat>): List<Nat>
  case xs {
    nil: List.nil!
    cons: List.cons!(smallest(xs), (sort_ascending(delete_smallest(xs))))
  }

// Returns an element at an index from the list
// if there is an element at that index
//   returns Maybe.some!(element)
// else
//   returns Maybe.none!
get<A: Type>(idx: Nat, xs: List<A>): Maybe<A>
   case xs {
     nil: Maybe.none!
     cons:case idx {
            zero: Maybe.none!
            succ: case idx.pred {
                    zero: Maybe.some!(xs.head)
                    succ: get!(idx.pred, xs.tail)
                  }
          }
    }

// Removes all elements that does not match a condition
// List.filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]) = [1, 3, 5]
filter<A: Type>(f: A -> Bool, xs: List<A>): List<A>
  case xs {
    nil: List.nil!
    cons: case f(xs.head) {
            false: filter!(f)(xs.tail)
            true : List.cons!(xs.head, filter!(f)(xs.tail))
           }
  }

ex_07: IO<Unit>
  IO {
    Tests._07.is_empty(is_empty)
    Tests._07.tail(tail)
    Tests._07.not(notb)
    Tests._07.inc(inc)
    Tests._07.dec(dec)
    Tests._07.concat(concat)
    Tests._07.add(add)
    Tests._07.and(and)
    Tests._07.eql(eql)
    Tests._07.reverse(reverse)
    Tests._07.length(length)
    Tests._07.mul(mul)
    Tests._07.drop(drop)
    Tests._07.take(take)
  }

