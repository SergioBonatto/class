//Bits

//File for exercises in Bits

//e = empty
//o = 0
//i = 1
type Bits { 
  e
  o(pred: Bits)
  i(pred: Bits)
}

//a = Bits.i(Bits.i(Bits.e))
//b = Bits.o(Bits.i(Bits.i(Bits.e)))
//c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
//d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))

<<<<<<< HEAD

//Verifies if it is an Empty Bit

//is_empty(a)      -> Bool.false
//is_empty(b)      -> Bool.false
//is_empty(c)      -> Bool.false
//is_empty(d)      -> Bool.false
//is_empty(Bits.e) -> Bool.true
is_empty(b: Bits): Bool
  ?is_empty



//Gets the Tail of a Bits structure

//tail(a) -> Bits.i(Bits.e)
//tail(b) -> Bits.i(Bits.i(Bits.e))
//tail(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//tail(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
tail(b: Bits): Bits
  ?tail


//Negates all Bits

//notb(a) -> Bits.o(Bits.o(Bits.e))
//notb(b) -> Bits.i(Bits.o(Bits.o(Bits.e)))
//notb(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//notb(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.e))))
notb(b: Bits): Bits
  ?notb




//Increments a Bit

//inc(a) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//inc(b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//inc(c) -> Bits.i(Bits.o(Bits.i(Bits.i(Bits.e))))
//inc(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.i(Bits.e)))))
inc(b: Bits): Bits
  ?inc



//Decrements a Bit

//dec(a) -> Bits.o(Bits.i(Bits.e))
//dec(b) -> Bits.i(Bits.o(Bits.i(Bits.e)))
//dec(c) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.e))))
//dec(d) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
dec(b: Bits): Bits
  ?dec




//Concatenate two Bits structures

//concat(a,b) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)
//concat(b,c) -> Bits.o(Bits.i(Bits.i(Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))))))
//concat(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))))))
concat(a: Bits, b: Bits): Bits
  ?concat



//Adds two Bits structures

//add(a,b) -> Bits.i(Bits.o(Bits.o(Bits.i(Bits.e))))
//add(b,c) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//add(c,d) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)))))
add(a: Bits, b: Bits): Bits 
  ?add




//Returns Bits.i if only both bits are Bits.i

//and(a,b) -> Bits.o(Bits.i(Bits.e))
//and(b,c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//and(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
and(a: Bits, b: Bits): Bits
  ?and


//Returns Bits.i if any of bits are Bits.i

//or(a,b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//or(b,c) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
//or(c,d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
or(a: Bits, b: Bits): Bits
  ?or



//Verifies if both Bit structures are equal

//eql(a,b) -> Bool.false
//eql(b,c) -> Bool.false
//eql(d,d) -> Bool.true
eql(a: Bits, b: Bits): Bool
  ?eql



//Reverses a Bits structure

reverse_go(b: Bits, acum: Bits): Bits
  ?reverse_go
  


//reverse(a) -> Bits.i(Bits.i(Bits.e))
//reverse(b) -> Bits.i(Bits.i(Bits.o(Bits.e)))
//reverse(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//reverse(d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
reverse(b: Bits): Bits
  reverse_go(b, Bits.e)




//Gets the length of the Bits structure

length_go(bs: Bits, acum: Nat): Nat
  ?length_go




//length(a) -> Nat.succ(Nat.succ(Nat.zero))
//length(b) -> Nat.succ(Nat.succ(Nat.succ(Nat.zero)))
//length(c) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
//length(d) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
length(bs: Bits): Nat
  length_go(bs, 0)



//Multiplies two Bits structures

mul_go(a: Bits, b: Bits, acum: Bits): Bits
  ?mul_go


//mul(a,b) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//mul(b,c) -> Bits.o(Bits.o(Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))))
mul(a: Bits, b: Bits): Bits
  mul_go(a, b, Bits.e)



//Drops a n Number of Bits starting from from the least significative bit

//drop(1, a) -> Bits.i(Bits.e)
//drop(1, b) -> Bits.i(Bits.i(Bits.e))
//drop(1, c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//drop(1, d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
drop(n: Nat, bs: Bits): Bits
  ?drop
  


//Takes n Bits from the structure, starting from the least significative bit

//take(1, a) -> Bits.i(Bits.e)
//take(2, b) -> Bits.o(Bits.i(Bits.e))
//take(3, c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//take(4, d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
take(n: Nat, bs: Bits): Bits
  ?take

ex_07: IO<Unit>
  IO {
    Tests._07.is_empty(is_empty)
    Tests._07.tail(tail)
    Tests._07.not(notb)
    Tests._07.inc(inc)
    Tests._07.dec(dec)
    Tests._07.concat(concat)
    Tests._07.add(add)
    Tests._07.and(and)
    Tests._07.eql(eql)
    Tests._07.reverse(reverse)
    Tests._07.length(length)
    Tests._07.mul(mul)
    Tests._07.drop(drop)
    Tests._07.take(take)
  }
<<<<<<< HEAD
=======
=======
// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]
zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
  case xs {
    nil: List.nil!
    cons: case ys {
            nil: List.nil!
            cons: List.cons!(Pair.new!!(xs.head, ys.head), zip!!(xs.tail, ys.tail))
           }
  }
//  ?a

// Returns the smallest element of a List

// -------- Roubalheira descarada --------
// o que eu fiz? Roubei, na cara dura
// peguei a função gtn do ex_04 e
// apliquei no smallest

gtn(a: Nat, b: Nat): Bool // if A > B == True else false
  case a {
    zero: Bool.false
    succ: case b {
            zero: Bool.true
            succ: gtn(a.pred, b.pred)
            }
  }

// caso xs seja vazio, retorna zero
// caso tenha algo
// se não tiver um corpo/tail, retorna a cabeça
// se tirver uma tail, eu verifico se a
// head é maior que a head da taila
// se for, a função roda de novo
// exluindo a head
// se não for, eu crio uma nova lista só
// com a head e a tail da tail,
// excluindo a head da tail
// e rodo a função nessa nova lista

smallest(xs: List<Nat>): Nat
  case xs {
    nil: Nat.zero
    cons: case xs.tail {
            nil: xs.head
            cons: case gtn(xs.head, xs.tail.head) {
                    true: smallest(xs.tail)
                    false: smallest(List.cons!(xs.head, xs.tail.tail))
                    }
           }
  }
//  ?s

// Returns the same list without the smallest element
delete_smallest(xs: List<Nat>): List<Nat>
  case xs {
    nil: List.nil!
    cons: case xs.tail {
            nil: List.nil!
            cons: case gtn(xs.head, xs.tail.head) {
                    true: delete_smallest(List.cons!(xs.head, xs.tail.tail))
                    false: delete_smallest(xs.tail)                  
           }
          }
  }
//  ?d

// Returns the same list, in ascending order
//sort_ascending(xs: List<Nat>): List<Nat>
//  ?a

// Returns an element at an index from the list
// if there is an element at that index
//   returns Maybe.some!(element)
// else
//   returns Maybe.none!
//get<A: Type>(idx: Nat, xs: List<A>): Maybe<A>
//  ?g

// Removes all elements that does not match a condition
// List.filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]) = [1, 3, 5]
//filter<A: Type>(f: A -> Bool, xs: List<A>): List<A>
//  ?f


  
ex_07:_
  let a = [3, 1, 5, 2]
  let b = ["a", "b", "c", "d"]
  //List.show!(Pair.show!!(Nat.show, (x) x), zip!!(a, b))
  //smallest(a)
  List.show!(Nat.show, delete_smallest(a))

>>>>>>> 7afdde3 (add ex_07 and edit ex_04)
>>>>>>> 1937cee (ex04 e ex07 alterado)
