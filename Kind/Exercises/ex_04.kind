// Advanced exercises involving recursion

type Nat {
  zero
  succ(pred: Nat)
}

// Doubles a number
dbl(a: Nat): Nat // double
  case a {
    zero: Nat.zero
    succ: Nat.succ(Nat.succ(dbl(a.pred)))
    }
//  ?b

// Addition
add(a: Nat, b: Nat): Nat
  case a {
    zero: b
    succ: case b{
            zero: a
            succ: Nat.succ(add(a, b.pred))
            }
  }
//  ?a

// Multiplication
mul(a: Nat, b: Nat): Nat
  case a {
    zero: Nat.zero
    succ: case b {
            zero: Nat.zero
            succ: add(mul(a.pred, b), b)
            }
  }
//  ?m

// Subtraction
// 4 - 5 = 0
// 5 - 4 = 1
sub(a: Nat, b: Nat): Nat
  case a {
    zero: Nat.zero
    succ: case b {
            zero: a
            succ: sub(a.pred, b.pred)
            }
  }
//  ?s

// Factorial
// 4! = 24
fac(a: Nat): Nat 
  case a {
    zero: Nat.zero
    succ: case a.pred {
            zero: a
            succ: mul(a, fac(a.pred))
            }
  }
//  ?f

// Division
// 1 / 2 = 0
// x / 0 = 0
// 5 / 2 = 2
//div(a: Nat, b: Nat): Nat // division
  

// Equal
eql(a: Nat, b: Nat): Bool // Given 2 numbers, it returns true if the 2 are the same and false if they are different.
  case a {
    zero: case b {
      zero: Bool.true
      succ: Bool.false
      }
    succ: case b {
      zero: Bool.false
      succ: eql(a.pred, b.pred)
      }
  }
//  ?e 

// Do not use the "not" function to create the functions below

// Greater than
// 2 > 1 = True
// 3 > 3 = False
gtn(a: Nat, b: Nat): Bool // if A > B == True else false
  case a {
    zero: Bool.false
    succ: case b {
            zero: Bool.true
            succ: gtn(a.pred, b.pred)
            }
  }
//  ?g

// Lower than
// 1 < 2 = True
// 3 < 3 = False
ltn(a: Nat, b: Nat): Bool // if A > B == False else true 
  case a {
    zero: case b {
            zero: Bool.false
            succ: Bool.true
      }
    succ: case b {
            zero: Bool.false
            succ: ltn(a.pred, b.pred)
      }
  }
//  ?l

// Minimum
// min(2, 3) = 2
// min(4, 1) = 1
min(a: Nat, b: Nat): Nat // if A < B then A else B
 case a {
  zero: a
  succ: 
    case b {
      zero: b
      succ: min(a.pred, b.pred)
    }
 }
  // ?m2

// Maximum
// max(2, 3) = 3
// max(4, 1) = 4
max(a: Nat, b: Nat): Nat // if A > B then A else B
  case a {
    zero: b
    succ: 
      case b{
        zero: a
        succ: max(a.pred, b.pred)
      }
  }
  // ?m3


// Divides a number by two
// 2 / 2 = 1
// 5 / 2 = 2
// 1 / 2 = 0
hlf(a: Nat): Nat
  case a {
    zero: a
    succ: 
      case a.pred{
        zero: Nat.zero
        succ: Nat.succ(hlf(a.pred.pred))
      }
  }
// ?h

// Division
// 1 / 2 = 0
// x / 0 = 0
// 5 / 2 = 2
div(a: Nat, b: Nat): Nat // division
  case a {
    zero: Nat.zero
    succ: 
      case b{
        zero: Nat.zero
        succ: 
          case b.pred{
            zero: a
            succ: Nat.succ(div(a.pred, b.pred))
          }
      }
  }


ex_04: IO<Unit>
  IO {
    Tests._04.dbl(dbl)
    Tests._04.add(add)
    Tests._04.mul(mul)
    Tests._04.sub(sub)
    Tests._04.fac(fac)
    Tests._04.eql(eql)
    Tests._04.gtn(gtn)
    Tests._04.ltn(ltn)
    Tests._04.min(min)
    Tests._04.max(max)
    Tests._04.hlf(hlf)
    Tests._04.div(div)
  }

//
// ex_04:_
//   let a = 4
//   let b = 9
//   //dbl(5)
//   //add(a, b)
//   //mul(a, b)
//   //sub(b, a)
//   fac(9)
//   //eql(b, a)
//   //gtn(a, b)
//   ltn(b, a)
//   //ltn(b, a)
