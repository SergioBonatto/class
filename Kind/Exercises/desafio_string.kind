concat(xs: String, ys: String): String
  case xs {
    nil: ys
    cons: String.cons(xs.head, concat(xs.tail, ys))
}

equal(x: Char, y: Char): Bool
  U16.eql(x, y)

stringequal(xs: String, ys: String): Bool
  case xs ys {
    nil nil: Bool.true
    cons cons: case equal(xs.head, ys.head){
      true: stringequal(xs.tail, ys.tail)
      false: Bool.false
      }
  } default Bool.false

take(n: Nat, xs: String): String
  case n {
    zero: ""
    succ:
      case xs {
        nil : xs
        cons: concat(Char.to_string(xs.head), take(n.pred, xs.tail)) 
      }
  }

drop(n: Nat, xs: String): String
  case n {
    zero: xs
    succ: 
      case xs {
        nil : xs
        cons: drop(n.pred, xs.tail)
      }
  }

// =============================================================
// ===================== função principal ======================
// =============================================================

Find_and_replace(to_remove: String, to_add: String, str: String): String
  case to_add {
    nil : str
    cons: 
      case to_remove {
        nil : str
        cons:
          case str {
            nil : str
            cons:  
              case stringequal(to_remove, take(String.length(to_remove), str)){
                false: concat(Char.to_string(str.head), Find_and_replace(to_remove, to_add, str.tail))
                true : concat(to_add, (concat("", Find_and_replace(to_remove, to_add, drop(String.length(to_remove), str)))))
            }
        } 
      }
  }

desafio_string: _
  Find_and_replace("test", "example", "In this test, the word test should be replaced by the word example.")
  // This should be the result: "In this example, the word example should be replaced by the word example."

