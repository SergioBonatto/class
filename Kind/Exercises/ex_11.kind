// ListMap Exercises

type ListMap <A: Type> { 
  empty
  cons(head: Pair<Nat, A>, tail: ListMap<A>)
}

// Inserts a value
// If the key is already present, its value is updated
// If the key is not present, the value is added to the map
// set<A: Type>(key: Nat, value: A, lm: ListMap<A>): ListMap<A>
  // ?set


// // Converts the ListMap to a String
// show<A: Type>(fn: A -> String, lm: ListMap<A>): String
//   case lm {
//     empty: ListMap.cons<A>(Pair.new<Nat, A>(key, value), lm)
//     cons :
//       case lm.head {
//         new:
//           case Nat.eql(lm.head.fst, key){
//             false: ListMap.cons<A>(lm.head, set<A>(key, value, lm.tail))
//             true : ListMap.cons<A>(Pair.new<Nat, A>(key, value), lm.tail)
//           }
//       }
//   }
// Returns a Value from a Key
// If the key is not present, returns None
get<A: Type>(key: Nat, lm: ListMap<A>): Maybe<A>
  case lm {
    empty: Maybe.none<A>
    cons : 
      case lm.head {
        new:
          case Nat.eql(lm.head.fst, key){
            false: get<A>(key, lm.tail)
            true : Maybe.some<A>(lm.head.snd)
          }
    }
  }
// Applies a function to a Value from a Key
// Returns the same ListMap if the key is not present 
mut<A: Type>(key: Nat, fn: A -> A, lm: ListMap<A>): ListMap<A>
  case lm {
    empty: lm
    cons : 
      case lm.head {
        new: 
          case Nat.eql(lm.head.fst, key){
            true : ListMap.cons<A>(Pair.new<Nat, A>(key, fn(lm.head.snd)), lm.tail)
            false: ListMap.cons<A>(lm.head, mut<A>(key, fn, lm.tail))
          } 
      } 
  }
// Converts the ListMap to a String
show<A: Type>(fn: A -> String, lm: ListMap<A>): String
  case lm {
    empty: ""
    cons :
      case lm.head {
        new: 
          String.concat(fn(lm.head.snd), show<A>(fn, lm.tail))
      }
  }


// Checks if the ListMap has a key
// Returns true if the key is present, false otherwise
// has<A:Type>(key: Nat, lm: ListMap<A>): Bool
  // ?has


// Applies a function to all Values
// map<A: Type, B: Type>(fn: A -> B, lm: ListMap<A>): ListMap<B>
//   case lm {
//     empty: Bool.false
//     cons :
//       case lm.head {
//         new:
//           case Nat.eql(lm.head.fst, key){
//             true: Bool.true
//             false: has<A>(key, lm.tail)
//           }
//       }
//   }
// Removes all Elements that doesn't satisfy a condition
filter<A: Type>(cond: A -> Bool, lm: ListMap<A>): ListMap<A>
  case lm {
    empty: lm
    cons :
      case lm.head {
        new: 
          case cond(lm.head.snd){
            true : ListMap.cons<A>(lm.head, filter<A>(cond, lm.tail))
            false: filter<A>(cond, lm.tail)
          }
      }
  }
// Applies a function to all Values
map<A: Type, B: Type>(fn: A -> B, lm: ListMap<A>): ListMap<B>
  case lm {
    empty:ListMap.empty<B>
    cons: 
      case lm.head {
        new: ListMap.cons<B>(Pair.new<Nat, B>(lm.head.fst, fn(lm.head.snd)), map<A, B>(fn, lm.tail))
      }
  }

stress_test(sets: Nat, gets: Nat): IO<Unit>
  Tests.stress.lmap(sets, gets)

// <<<<<<< HEAD
// ex_11: IO<Unit>
//   IO {
//     Tests._11.set(set)
//     Tests._11.get(get)
//     Tests._11.mut(mut)
//     Tests._11.has(has)
//     Tests._11.filter(filter)
//     Tests._11.map(map)
//   }
// =======
// mapa : ListMap<String>
//                ListMap.cons<String>(Pair.new<Nat, String>(1, "M")
//                ListMap.cons<String>(Pair.new<Nat, String>(2, "a")
//                ListMap.cons<String>(Pair.new<Nat, String>(3, "t")
//                ListMap.cons<String>(Pair.new<Nat, String>(4, "t")
//                ListMap.cons<String>(Pair.new<Nat, String>(5, "e")
//                ListMap.cons<String>(Pair.new<Nat, String>(6, "o")
//                ListMap.empty<String>))))))
//


ex_11: IO<Unit>
 IO {
   // Tests._11.set(set)
   Tests._11.get(get)
   Tests._11.mut(mut)
   // Tests._11.has(has)
   Tests._11.filter(filter)
   Tests._11.map(map)
 }
